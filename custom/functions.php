<?php

function random_reference()
{		
	global $PDO,$PDO_WRITE;

	$RANDOM_REF = date('YmdHis').'S'.rand(0,99999);

	try
	{
		$query = 	"SELECT UUID() as randomRefToUse;";
					
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute();	

		if($row = $sth->fetch(PDO::FETCH_ASSOC))	
		{
			$RANDOM_REF = $row['randomRefToUse'];
		}
	}
	catch(PDOException $e)
	{
		return $RANDOM_REF;
	}
	return $RANDOM_REF;
} 


//Send Grid Email function
function SendGridSentEmail($strTo,$strSubject,$strMessage,$strFrom="noreply@rubaywines.com")
{

  $APIKEY = "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";
  

  $strMessage = str_replace(array('\r', '\n'), array(chr(13), chr(10)), $strMessage);
  $strMessage = str_replace(array(chr(13), chr(10)), array(" ", "<BR />"), $strMessage);
  

  if($strTo !='' && $strMessage !='')
  {

    
    $postParam = array("personalizations" => array( ["to" => array(["email" => $strTo])]),
            "from" => ["email" => $strFrom],
            "subject" => $strSubject,
            "content" => array(["type" => "text/html", "value" =>$strMessage])
    );


    $postParam =  json_encode($postParam, JSON_HEX_QUOT | JSON_HEX_TAG);

    //print_r($postParam); exit;
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $curl = curl_init();

    curl_setopt_array($curl, array(
      CURLOPT_URL => "https://api.sendgrid.com/v3/mail/send",
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_ENCODING => "",
      CURLOPT_MAXREDIRS => 10,
      CURLOPT_TIMEOUT => 30,
      CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
      CURLOPT_CUSTOMREQUEST => "POST",
      CURLOPT_POSTFIELDS => $postParam,
      CURLOPT_HTTPHEADER => array(
        "authorization: Bearer ".$APIKEY,
        "content-type: application/json"
      ),
    ));

    $response = curl_exec($curl);
    $info = curl_getinfo($curl);
    $err = curl_error($curl);

    curl_close($curl);

    $returnResponse = "";

    if ($err) {
      $returnResponse = "cURL Error #:" . $err;
    } else if(($info['http_code'] == 200) || ($info['http_code'] == 202)){
      $returnResponse = "success";
    }else {
      $returnResponse = $response;
    }

    return $returnResponse;
  }
}


function getCountryRef($country_name)
{
	global $PDO, $PDO_WRITE;

  $country_ref = "";

	if(trim($country_name)!="")
	{
		$query = 	"SELECT
						country_ref 
				 	FROM 
						country
				 	WHERE 
					 	MD5(country_name) = :country_name";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':country_name' => md5($country_name)));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$country_ref = $row['country_ref'];
		}
	    else
	    {
	      $country_ref = addCountryForRef($country_name);
	    }
	}
	return $country_ref;
}


function addCountryForRef($country_name)
{
	global $PDO, $PDO_WRITE;

  $country_ref = "";

	if(trim($country_name)!="")
	{
		$country_ref = random_reference();
		try
		{
			$query = 	"INSERT INTO
						country
						SET
						country_created 	= :country_created,
						country_modified 		= :country_modified,
						country_status_id 		= '1',
						country_ref 		= :country_ref,
						country_name 		= :country_name";
			
			$sth = $PDO_WRITE->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

			$sth->execute(array(':country_ref' => $country_ref,':country_name' => $country_name,':country_created' =>date('Y-m-d H:i:s'),':country_modified' =>date('Y-m-d H:i:s')));
		}
		catch(PDOException $e)
		{
			echo "Error: " . __LINE__. $e->getMessage();
		}		
	}
	return $country_ref;
}

function getStateRef($states_name, $states_country_ref)
{
	global $PDO, $PDO_WRITE;

  	$states_ref = "";

	if(trim($states_name)!="")
	{
		$query = 	"SELECT
						states_ref 
				 	FROM 
						states
				 	WHERE 
					 	MD5(states_name_short) = :states_name
            AND
					 	MD5(states_country_ref) = :states_country_ref";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':states_name' => md5($states_name), ':states_country_ref' => md5($states_country_ref)));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$states_ref = $row['states_ref'];
		}
    else
    {
      $states_ref = addStateForRef($states_name,$states_country_ref);
    }
	}
	return $states_ref;
}


function addStateForRef($states_name, $states_country_ref)
{
	global $PDO, $PDO_WRITE;

  $states_ref = "";

	if(trim($states_name)!="")
	{
		$states_ref = random_reference();
		try
		{
			$query = 	"INSERT INTO
						states
						SET
						states_created 	= :states_created,
						states_modified 		= :states_modified,
						states_status_id 		= '1',
						states_ref 		= :states_ref,
						states_name 		= :states_name,
						states_name_short 		= :states_name_short,
						states_country_ref 		= :states_country_ref";
			
			$sth = $PDO_WRITE->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

			$sth->execute(array(':states_ref' => $states_ref,':states_name' => $states_name,':states_name_short' => $states_name,':states_country_ref' => $states_country_ref,':states_created' =>date('Y-m-d H:i:s'),':states_modified' =>date('Y-m-d H:i:s')));
		}
		catch(PDOException $e)
		{
			echo "Error: " . __LINE__. $e->getMessage();
		}		
	}
	return $states_ref;
}


function getSourceRef($source_name)
{
	global $PDO, $PDO_WRITE;

  $source_ref = "";

	if(trim($source_name)!="")
	{
		$query = 	"SELECT
						source_ref 
				 	FROM 
						source
				 	WHERE 
					 	MD5(source_name) = :source_name";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':source_name' => md5($source_name)));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$source_ref = $row['source_ref'];
		}
    else
    {
      $source_ref = addSourceForRef($source_name);
    }
	}
	return $source_ref;
}


function addSourceForRef($source_name)
{
	global $PDO, $PDO_WRITE;

  $source_ref = "";

	if(trim($source_name)!="")
	{
		$source_ref = random_reference();
		try
		{
			$query = 	"INSERT INTO
						source
						SET
						source_created 	= :source_created,
						source_modified 		= :source_modified,
						source_status_id 		= '1',
						source_ref 		= :source_ref,
						source_name 		= :source_name";
			
			$sth = $PDO_WRITE->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

			$sth->execute(array(':source_ref' => $source_ref,':source_name' => $source_name,':source_created' =>date('Y-m-d H:i:s'),':source_modified' =>date('Y-m-d H:i:s')));
		}
		catch(PDOException $e)
		{
			echo "Error: " . __LINE__. $e->getMessage();
		}		
	}
	return $source_ref;
}

function getCustomersRef($customers_email)
{
	global $PDO, $PDO_WRITE;

  $customers_ref = "";

	if(trim($customers_email)!="")
	{
		$query = 	"SELECT
						customers_ref 
				 	FROM 
						customers
				 	WHERE 
					 	MD5(customers_email) = :customers_email
             AND
            customers_status_id = '1'";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':customers_email' => md5($customers_email)));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$customers_ref = $row['customers_ref'];
		}
		else
		{
			$customers_ref = addCustomersForRef($customers_email);
		}
	}
	return $customers_ref;
}

function addCustomersForRef($customers_email)
{
	global $PDO, $PDO_WRITE;

  $customers_ref = "";

	if(trim($customers_email)!="")
	{
		$customers_ref = random_reference();
		try
		{
			$query = 	"INSERT INTO
						customers
						SET
						customers_created 	= :customers_created,
						customers_ref 		  = :customers_ref,
						customers_email 		= :customers_email";
			
			$sth = $PDO_WRITE->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

			$sth->execute(array(':customers_ref' => $customers_ref,':customers_email' => $customers_email,':customers_created' =>date('Y-m-d H:i:s')));
		}
		catch(PDOException $e)
		{
			echo "Error: " . __LINE__. $e->getMessage();
		}		
	}
	return $customers_ref;
}

function getCustomersRefOnly($customers_email)
{
	global $PDO, $PDO_WRITE;

  $customers_ref = "";

	if(trim($customers_email)!="")
	{
		$query = 	"SELECT
						customers_ref 
				 	FROM 
						customers
				 	WHERE 
					 	MD5(customers_email) = :customers_email
             AND
            customers_status_id = '1'";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':customers_email' => md5($customers_email)));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$customers_ref = $row['customers_ref'];
		}
		else
		{
			$customers_ref = "";
		}
	}
	return $customers_ref;
}

function getPacksRefOnly($pack_code)
{
	global $PDO, $PDO_WRITE;

  	$pack_ref = "";

	if(trim($pack_code)!="")
	{
		// $query = 	"SELECT
		// 				pack_ref 
		// 		 	FROM 
		// 				pack
		// 		 	WHERE 
		// 			 	MD5(pack_code) = :pack_code
  	//            AND
  	//           pack_status_id = '1'";

		$query = 	"SELECT
						pack_ref 
				 	FROM 
						pack
				 	WHERE 
					 	pack_code LIKE :pack_code
             AND
            pack_status_id = '1'";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':pack_code' => $pack_code));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$pack_ref = $row['pack_ref'];
		}
		else
		{
			$pack_ref = "";
		}
	}
	return $pack_ref;
}

function getPacksCodeOnly($pack_ref)
{
	global $PDO, $PDO_WRITE;

  	$pack_code = "";

	if(trim($pack_ref)!="")
	{
		$query = 	"SELECT
						pack_code 
				 	FROM 
						pack
				 	WHERE 
					 	MD5(pack_ref) = :pack_ref
             AND
            pack_status_id = '1'";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':pack_ref' => md5($pack_ref)));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$pack_code = $row['pack_code'];
		}
		else
		{
			$pack_code = "";
		}
	}
	return $pack_code;
}

function getCommunicationCodeOnly($communication_ref)
{
	global $PDO, $PDO_WRITE;

  	$communication_code = "";

	if(trim($communication_ref)!="")
	{
		$query = 	"SELECT
						communication_code 
				 	FROM 
						communication
				 	WHERE 
					 	MD5(communication_ref) = :communication_ref
             AND
            communication_status_id = '1'";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':communication_ref' => md5($communication_ref)));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$communication_code = $row['communication_code'];
		}
		else
		{
			$communication_code = "";
		}
	}
	return $communication_code;
}


function getAllActiveCommunicationWithCommunicationCode()
{
	global $PDO, $PDO_WRITE;

	$communicationArray = array();
  	
	try 
	{
		$query = 	"SELECT 
						communication_ref,
						communication_code,
						communication_name
				 	FROM 
						communication
				 	WHERE 
				 		communication_status_id = :communication_status_id
				 		AND
				 		communication_code != ''
					ORDER BY 
						communication_code ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':communication_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$communicationArray = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $communicationArray;
}


function getAllActivePackWithPackCode()
{
	global $PDO, $PDO_WRITE;

	$packArray = array();
  	
	try 
	{
		$query = 	"SELECT 
						pack_ref,
						pack_code,
						pack_name
				 	FROM 
						pack
				 	WHERE 
				 		pack_status_id = :pack_status_id
				 		AND
				 		pack_code != ''
					ORDER BY 
						pack_code ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':pack_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$packArray = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $packArray;
}

function getAllActiveCountry()
{
	global $PDO, $PDO_WRITE;

	$countryArray = array();
  	
	try 
	{
		$query = 	"SELECT 
						country_ref,
						country_name
				 	FROM 
						country
				 	WHERE 
				 		country_status_id = :country_status_id
					ORDER BY 
						country_name ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':country_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$countryArray = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $countryArray;
}

function getAllActiveStates()
{
	global $PDO, $PDO_WRITE;

	$statesArray = array();
  	
	try 
	{
		$query = 	"SELECT 
						states_ref,
						states_name
				 	FROM 
						states
				 	WHERE 
				 		states_status_id = :states_status_id
					ORDER BY 
						states_name ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':states_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$statesArray = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $statesArray;
}

function getAllActiveSource()
{
	global $PDO, $PDO_WRITE;

	$countryArray = array();
  	
	try 
	{
		$query = 	"SELECT 
						source_ref,
						source_name
				 	FROM 
						source
				 	WHERE 
				 		source_status_id = :source_status_id
					ORDER BY 
						source_name ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':source_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$sourceArray = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $sourceArray;
}

function getAllActive_customers_fav_wine_1()
{
	global $PDO, $PDO_WRITE;

	$customers_fav_wine_1_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_fav_wine_1)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_fav_wine_1 != ''
					ORDER BY 
						customers_fav_wine_1 ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_fav_wine_1_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_fav_wine_1_Array;
}

function getAllActive_customers_fav_wine_2()
{
	global $PDO, $PDO_WRITE;

	$customers_fav_wine_2_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_fav_wine_2)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_fav_wine_2 != ''
					ORDER BY 
						customers_fav_wine_2 ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_fav_wine_2_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_fav_wine_2_Array;
}

function getAllActive_customers_least_fav_wine()
{
	global $PDO, $PDO_WRITE;

	$customers_least_fav_wine_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_least_fav_wine)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_least_fav_wine != ''
					ORDER BY 
						customers_least_fav_wine ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_least_fav_wine_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_least_fav_wine_Array;
}

function getAllActive_customers_avg_sp_per_bot_wine()
{
	global $PDO, $PDO_WRITE;

	$customers_avg_sp_per_bot_wine_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_avg_sp_per_bot_wine)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_avg_sp_per_bot_wine != ''
					ORDER BY 
						customers_avg_sp_per_bot_wine ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_avg_sp_per_bot_wine_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_avg_sp_per_bot_wine_Array;
}

function getAllActive_customers_fav_wine_region()
{
	global $PDO, $PDO_WRITE;

	$customers_fav_wine_region_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_fav_wine_region)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_fav_wine_region != ''
					ORDER BY 
						customers_fav_wine_region ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_fav_wine_region_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_fav_wine_region_Array;
}

function getAllActive_customers_normally_buy_wine()
{
	global $PDO, $PDO_WRITE;

	$customers_normally_buy_wine_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_normally_buy_wine)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_normally_buy_wine != ''
					ORDER BY 
						customers_normally_buy_wine ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_normally_buy_wine_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_normally_buy_wine_Array;
}

function getAllActive_customers_occas_drink_before_wine()
{
	global $PDO, $PDO_WRITE;

	$customers_occas_drink_before_wine_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_occas_drink_before_wine)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_occas_drink_before_wine != ''
					ORDER BY 
						customers_occas_drink_before_wine ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_occas_drink_before_wine_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_occas_drink_before_wine_Array;
}

function getAllActive_customers_last_winery_visit()
{
	global $PDO, $PDO_WRITE;

	$customers_last_winery_visit_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_last_winery_visit)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_last_winery_visit != ''
					ORDER BY 
						customers_last_winery_visit ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_last_winery_visit_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_last_winery_visit_Array;
}

function getAllActive_customers_member_wine_club()
{
	global $PDO, $PDO_WRITE;

	$customers_member_wine_club_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_member_wine_club)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_member_wine_club != ''
					ORDER BY 
						customers_member_wine_club ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_member_wine_club_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_member_wine_club_Array;
}

function getAllActive_customers_glasses_a_week()
{
	global $PDO, $PDO_WRITE;

	$customers_glasses_a_week_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_glasses_a_week)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_glasses_a_week != ''
					ORDER BY 
						customers_glasses_a_week ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_glasses_a_week_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_glasses_a_week_Array;
}

function getAllActive_customers_ethnicity()
{
	global $PDO, $PDO_WRITE;

	$customers_ethnicity_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_ethnicity)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_ethnicity != ''
					ORDER BY 
						customers_ethnicity ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_ethnicity_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_ethnicity_Array;
}

function getAllActive_customers_wine_varietal()
{
	global $PDO, $PDO_WRITE;

	$customers_wine_varietal_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_wine_varietal)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_wine_varietal != ''
					ORDER BY 
						customers_wine_varietal ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_wine_varietal_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_wine_varietal_Array;
}

function getAllActive_customers_product()
{
	global $PDO, $PDO_WRITE;

	$customers_product_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_product)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_product != ''
					ORDER BY 
						customers_product ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_product_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_product_Array;
}

function getAllActive_customers_company()
{
	global $PDO, $PDO_WRITE;

	$customers_company_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_company)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_company != ''
					ORDER BY 
						customers_company ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_company_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_company_Array;
}

function getAllActive_customers_cohort()
{
	global $PDO, $PDO_WRITE;

	$customers_cohort_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_cohort)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_cohort != ''
					ORDER BY 
						customers_cohort ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_cohort_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_cohort_Array;
}

function getAllActive_customers_enrollment()
{
	global $PDO, $PDO_WRITE;

	$customers_enrollment_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						DISTINCT(customers_enrollment)
				 	FROM 
						customers
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND
				 		customers_enrollment != ''
					ORDER BY 
						customers_enrollment ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$customers_enrollment_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_enrollment_Array;
}



function getWine_detail_from_pack_mapping($PACK_REF, $WINE_SL_NO)
{
	global $PDO, $PDO_WRITE;

	$customers_ethnicity_Array = array();
  	
	try 
	{

		$query = 	"SELECT 
						wine_name,
						winery_name,
						wine_price_point,
						IFNULL(group_concat( concat(' ',varietal_name) ),'') as varietal_name_list,
						region_name,
						states_name,
						wine_vintage
				 	FROM 
						winepackmap
						LEFT JOIN wine ON wine_ref = winepackmap_wine_ref
						LEFT JOIN winery ON winery_ref = wine_winery_ref
						LEFT JOIN winevarientalmap ON winevarientalmap_wine_ref  = wine_ref
						LEFT JOIN varietal ON varietal_ref = winevarientalmap_variental_ref 
						LEFT JOIN region ON region_ref = wine_region_ref
						LEFT JOIN states ON states_ref = region_states_ref
				 	WHERE 
				 		winepackmap_status_id = :winepackmap_status_id
				 		AND
				 		winepackmap_pack_ref  = :winepackmap_pack_ref 
				 		AND
				 		winepackmap_slno = :winepackmap_slno
					ORDER BY 
						wine_name ASC";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(
														':winepackmap_status_id' => '1',
														':winepackmap_pack_ref' => $PACK_REF,
														':winepackmap_slno' => $WINE_SL_NO
													);

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array = $row;
			}
			$customers_ethnicity_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_ethnicity_Array;
}

function getCustomer_feedback_score_for_pack($PACK_REF, $WINE_SL_NO)
{
	global $PDO, $PDO_WRITE;

	$customers_ethnicity_Array = array();
  	
	try 
	{
		$query = 	"SELECT 
						ROUND(AVG(custpackfeedback_wine_{$WINE_SL_NO}_taste),2) as taste_score,
						ROUND(AVG(custpackfeedback_wine_{$WINE_SL_NO}_smell),2) as smell_score,
						ROUND(AVG(custpackfeedback_wine_{$WINE_SL_NO}_overall),2) as overall_score,
						(select count(1) FROM custpackfeedback where custpackfeedback_pack_ref  = :custpackfeedback_pack_ref ) as drink_again_score,
						(select count(1) FROM custpackfeedback where custpackfeedback_pack_ref  = :custpackfeedback_pack_ref AND custpackfeedback_first_in_pack   = :custpackfeedback_first_in_pack ) as first_in_pack_score,
						(select count(1) FROM custpackfeedback where custpackfeedback_pack_ref  = :custpackfeedback_pack_ref AND custpackfeedback_second_in_pack   = :custpackfeedback_first_in_pack ) as second_in_pack_score,
						(select count(1) FROM custpackfeedback where custpackfeedback_pack_ref  = :custpackfeedback_pack_ref AND custpackfeedback_most_expensive   = :custpackfeedback_first_in_pack ) as most_expensive_score,
						(select count(1) FROM custpackfeedback where custpackfeedback_pack_ref  = :custpackfeedback_pack_ref AND custpackfeedback_cheapest   = :custpackfeedback_first_in_pack ) as cheapest_score,
						count(1) as total_count
				 	FROM 
						custpackfeedback
				 	WHERE 
				 		custpackfeedback_status_id = :custpackfeedback_status_id
				 		AND
				 		custpackfeedback_pack_ref  = :custpackfeedback_pack_ref ";

		

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(
														':custpackfeedback_status_id' => '1',
														':custpackfeedback_pack_ref' => $PACK_REF,
														':custpackfeedback_first_in_pack' => $WINE_SL_NO
													);

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array = $row;
			}
			$customers_ethnicity_Array = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		echo "Error: " . __LINE__. $e->getMessage();
	}
	return $customers_ethnicity_Array;
}

function calculate_rank($PROVIDED_ARRAY)
{
	$rsort_array = $PROVIDED_ARRAY;
	rsort($rsort_array);

	$counter = 0;
	$RANKED_ARRAY = array();

	foreach ($PROVIDED_ARRAY as $key => $value) {
	    foreach ($rsort_array as $ordered_key => $ordered_value) {
	        if ($value === $ordered_value) {
	            $key = $ordered_key;
	            break;
	        }
	    }

	  $counter++;
	  $RANKED_ARRAY[$counter] = ((int) $key + 1);

	}
	return $RANKED_ARRAY;
}

function getPackWineDetails($pack_ref)
{
	global $PDO, $PDO_WRITE;

  $pack_return = array();

	if(trim($pack_ref)!="")
	{
		$query = 	"SELECT
						winepackmap_slno, 
						wine_name  
				 	FROM 
						winepackmap
						LEFT JOIN wine ON winepackmap_wine_ref = wine_ref
				 	WHERE 
					 	MD5(winepackmap_pack_ref) = :pack_ref
             AND
            winepackmap_status_id = '1'";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':pack_ref' => md5($pack_ref)));
		while($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$pack_return[$row['winepackmap_slno']] = $row['wine_name'];
		}
	}
	return $pack_return;
}

function getCustomersDetailsMyDetails($customers_ref)
{
	global $PDO, $PDO_WRITE;

  $customers_return = array();

	if(trim($customers_ref)!="")
	{
		$query = 	"SELECT
						customers_firstname, 
						customers_lastname, 
						customers_email, 
						customers_phone, 
						customers_dob, 
						customers_company, 
						customers_cohort, 
						branch_name 
				 	FROM 
						customers
						LEFT JOIN branch ON customers_branch_ref = branch_ref
				 	WHERE 
					 	MD5(customers_ref) = :customers_ref
             AND
            customers_status_id = '1'";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':customers_ref' => md5($customers_ref)));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$customers_return = $row;
		}
	}
	return $customers_return;
}

function getCustomersDetailsMyScore($customers_ref , $pack_code)
{
	global $PDO, $PDO_WRITE;

	$pack_ref = getPacksRefOnly($pack_code);

	$wine_details = getPackWineDetails($pack_ref);

  $score_return = array();

	if(trim($customers_ref)!="")
	{
		$query = 	"SELECT
						custpackfeedback_first_in_pack , 
						custpackfeedback_second_in_pack , 
						custpackfeedback_most_expensive , 
						custpackfeedback_cheapest 
				 	FROM 
						custpackfeedback
				 	WHERE 
					 	MD5(custpackfeedback_customer_ref) = :custpackfeedback_customer_ref
             AND
					 	MD5(custpackfeedback_pack_ref) = :custpackfeedback_pack_ref
             AND
            custpackfeedback_status_id = '1'
          ORDER BY custpackfeedback_id DESC
          LIMIT 1 ";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(
			':custpackfeedback_customer_ref' => md5($customers_ref),
			':custpackfeedback_pack_ref' => md5($pack_ref)
		));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$score_return['best_wine'] = $wine_details[$row['custpackfeedback_first_in_pack']];
			$score_return['second_best_wine'] = $wine_details[$row['custpackfeedback_second_in_pack']];
			$score_return['most_expensive'] = $wine_details[$row['custpackfeedback_most_expensive']];
			$score_return['cheapest'] = $wine_details[$row['custpackfeedback_cheapest']];


		}
	}
	return $score_return;
}

function getPackWineRating($pack_ref)
{
	$RETURN = array();

	if($pack_ref != "")
	{
		$cal_taste_score = array();
		$cal_smell_score = array();
		$cal_overall_score = array();
		$cal_first_in_pack_score = array();
		$cal_drink_again_score = array();

		$cal_most_expensive_score = array();
		$cal_cheapest_score = array();

		$tot_drink_again_score = 0;
		$tot_count = 0;

		$PACK_REF = $pack_ref;

		for($WINE_SL_NO=1; $WINE_SL_NO<=4; $WINE_SL_NO++)
		{
			$RETURN['customers_fav_wine_'.$WINE_SL_NO] = getWine_detail_from_pack_mapping($PACK_REF, $WINE_SL_NO);
			$RETURN['customers_score_wine_'.$WINE_SL_NO] = getCustomer_feedback_score_for_pack($PACK_REF, $WINE_SL_NO);

			$RETURN['customers_score_wine_'.$WINE_SL_NO]['first_in_pack_score'] = $RETURN['customers_score_wine_'.$WINE_SL_NO]['first_in_pack_score'] * 2;
			$RETURN['customers_score_wine_'.$WINE_SL_NO]['first_in_pack_score'] = $RETURN['customers_score_wine_'.$WINE_SL_NO]['first_in_pack_score'] + $RETURN['customers_score_wine_'.$WINE_SL_NO]['second_in_pack_score'];


			$tempChecker = $RETURN['customers_score_wine_'.$WINE_SL_NO];


			if($tempChecker['total_count'] == 0)
			{
				$RETURN['customers_score_wine_'.$WINE_SL_NO]['taste_score'] = 0;
				$RETURN['customers_score_wine_'.$WINE_SL_NO]['smell_score'] = 0;
				$RETURN['customers_score_wine_'.$WINE_SL_NO]['overall_score'] = 0;
				$RETURN['customers_score_wine_'.$WINE_SL_NO]['first_in_pack_score'] = 0;
				$RETURN['customers_score_wine_'.$WINE_SL_NO]['most_expensive_score'] = 0;
				$RETURN['customers_score_wine_'.$WINE_SL_NO]['cheapest_score'] = 0;


				$tempChecker['taste_score'] = 0;
				$tempChecker['smell_score'] = 0;
				$tempChecker['overall_score'] = 0;
				$tempChecker['first_in_pack_score'] = 0;
				$tempChecker['most_expensive_score'] = 0;
				$tempChecker['cheapest_score'] = 0;

				$tempChecker['total_count'] = 1;

			}

			$cal_taste_score[] = $tempChecker['taste_score'];
			$cal_smell_score[] = $tempChecker['smell_score'];
			$cal_overall_score[] = $tempChecker['overall_score'];
			$cal_first_in_pack_score[] = $tempChecker['first_in_pack_score'];

			$cal_most_expensive_score[] = $tempChecker['most_expensive_score'];
			$cal_cheapest_score[] = $tempChecker['cheapest_score'];

			$tot_drink_again_score = $tempChecker['drink_again_score'];
			$tot_count = $tempChecker['total_count'];


			$tot_drink_again_score = number_format((($tot_drink_again_score / $tot_count) * 100), 2);
			$cal_drink_again_score[] = $tot_drink_again_score;
			$RETURN['customers_score_wine_'.$WINE_SL_NO]['drink_again'] = $tot_drink_again_score;

		}

		$RETURN['cal_taste_score'] 			= calculate_rank($cal_taste_score);
		$RETURN['cal_smell_score'] 			= calculate_rank($cal_smell_score);
		$RETURN['cal_overall_score'] 		= calculate_rank($cal_overall_score);
		$RETURN['cal_first_in_pack_score'] 	= calculate_rank($cal_first_in_pack_score);
		$RETURN['cal_drink_again_score'] 	= calculate_rank($cal_drink_again_score);
		$RETURN['cal_most_expensive_score'] = calculate_rank($cal_most_expensive_score);
		$RETURN['cal_cheapest_score'] 		= calculate_rank($cal_cheapest_score);
		
		// echo "<PRE>";
		// print_r($RETURN);
		// die();
	}

	return $RETURN;
}

function getCustomersDetailsMyMysteryScore($customers_ref , $pack_code)
{
	global $PDO, $PDO_WRITE;

	$pack_ref = getPacksRefOnly($pack_code);

	//$wine_details = getPackWineDetails($pack_ref);

  $score_return = array();

	if(trim($customers_ref)!="")
	{
		$query = 	"SELECT
						custpackmystery_region , 
						custpackmystery_vintage , 
						custpackmystery_price_point
				 	FROM 
						custpackmystery
				 	WHERE 
					 	MD5(custpackmystery_customer_ref) = :custpackmystery_customer_ref
             AND
					 	MD5(custpackmystery_pack_ref) = :custpackmystery_pack_ref
             AND
            custpackmystery_status_id = '1'
          ORDER BY custpackmystery_id DESC
          LIMIT 1 ";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(
			':custpackmystery_customer_ref' => md5($customers_ref),
			':custpackmystery_pack_ref' => md5($pack_ref)
		));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$score_return['region'] = $row['custpackmystery_region'];
			$score_return['vintage'] = $row['custpackmystery_vintage'];
			$score_return['price'] = $row['custpackmystery_price_point'];
		}
	}
	return $score_return;
}

function getPacksCodeFromFeedback($custpackfeedback_customer_ref)
{
	global $PDO, $PDO_WRITE;

  	$pack_code = array();

	if(trim($custpackfeedback_customer_ref)!="")
	{
		$query = 	"SELECT
						DISTINCT pack_code 
				 	FROM 
						pack
						LEFT JOIN custpackfeedback ON custpackfeedback_pack_ref = pack_ref
				 	WHERE 
					 	MD5(custpackfeedback_customer_ref) = :custpackfeedback_customer_ref
             AND
            custpackfeedback_pack_ref != ''
             AND
            pack_status_id = '1'
             AND
            custpackfeedback_status_id = '1'
          ORDER BY custpackfeedback_id DESC";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':custpackfeedback_customer_ref' => md5($custpackfeedback_customer_ref)));
		while($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$pack_code[] = $row['pack_code'];
		}
	}
	return $pack_code;
}

function getPacksCodeFromFeedbackMystery($custpackmystery_customer_ref)
{
	global $PDO, $PDO_WRITE;

  	$pack_code = array();

	if(trim($custpackmystery_customer_ref)!="")
	{
		$query = 	"SELECT
						DISTINCT pack_code 
				 	FROM 
						pack
						LEFT JOIN custpackmystery ON custpackmystery_pack_ref = pack_ref
				 	WHERE 
					 	MD5(custpackmystery_customer_ref) = :custpackmystery_customer_ref
             AND
            custpackmystery_pack_ref != ''
             AND
            pack_status_id = '1'
             AND
            custpackmystery_status_id = '1'";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':custpackmystery_customer_ref' => md5($custpackmystery_customer_ref)));
		while($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$pack_code[] = $row['pack_code'];
		}
	}
	return $pack_code;
}


function getCustomersRefOnlyMoodle($customers_moodle_ref)
{
	global $PDO, $PDO_WRITE;

  $customers_ref = "";

	if(trim($customers_moodle_ref)!="")
	{
		$query = 	"SELECT
						customers_ref 
				 	FROM 
						customers
				 	WHERE 
					 	MD5(customers_moodle_ref) = :customers_moodle_ref
             AND
            customers_status_id = '1'";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':customers_moodle_ref' => md5($customers_moodle_ref)));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$customers_ref = $row['customers_ref'];
		}
		else
		{
			$customers_ref = "";
		}
	}
	return $customers_ref;
}

function getCustomersEmailAPI($moodle_ref)
{
  $customers_email = "";

	$USER_ID = $moodle_ref;
	$API_KEY = 'Ke42zHuNjxzo9DiJiJhhFLemrsLBXvdeYdhkiDtB4vxxuEQzqNMyKy9MR6';

	$curl = curl_init();

	curl_setopt_array($curl, array(
	  CURLOPT_URL => 'https://www.sip-and-learn.com/wp-json/rubay-platform/v1/user/'.$USER_ID.'?api_key='.$API_KEY,
	  CURLOPT_RETURNTRANSFER => true,
	  CURLOPT_ENCODING => '',
	  CURLOPT_MAXREDIRS => 10,
	  CURLOPT_TIMEOUT => 0,
	  CURLOPT_FOLLOWLOCATION => true,
	  CURLOPT_SSL_VERIFYPEER => false,
	  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
	  CURLOPT_CUSTOMREQUEST => 'GET',
	));

	$response = curl_exec($curl);
	curl_close($curl);

	$result = json_decode($response);

	if($result->user_email)
	{
	  $customers_email = $result->user_email;
	}

	return $customers_email;
}


function getCourseCategoryDetailsMoodle($coursecategory_array)
{
	global $PDO, $PDO_WRITE;

	$coursecategory_code = $coursecategory_array['category_id'];
	$coursecategory_name = $coursecategory_array['category_name'];

  $coursecategory_ref = "";

	if(trim($coursecategory_code)!="")
	{
		$query = 	"SELECT
						coursecategory_ref 
				 	FROM 
						coursecategory
				 	WHERE 
					 	MD5(coursecategory_code) = :coursecategory_code
             AND
            coursecategory_status_id = '1'";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':coursecategory_code' => md5($coursecategory_code)));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$coursecategory_ref = $row['coursecategory_ref'];
		}
		else
		{
			$coursecategory_ref = addCourseCategoryForRef($coursecategory_array);;
		}
	}
	return $coursecategory_ref;
}

function addCourseCategoryForRef($coursecategory_array)
{
	global $PDO, $PDO_WRITE;

	$coursecategory_code = $coursecategory_array['category_id'];
	$coursecategory_name = $coursecategory_array['category_name'];

  $coursecategory_ref = "";

	if(trim($coursecategory_code)!="")
	{
		$coursecategory_ref = random_reference();
		try
		{
			$query = 	"INSERT INTO
						coursecategory
						SET
						coursecategory_created 		= :coursecategory_created,
						coursecategory_status_id 	= '1',
						coursecategory_ref 		  	= :coursecategory_ref,
						coursecategory_name 			= :coursecategory_name,
						coursecategory_code 			= :coursecategory_code";
			
			$sth = $PDO_WRITE->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

			$sth->execute(array(':coursecategory_ref' => $coursecategory_ref,':coursecategory_name' => $coursecategory_name,':coursecategory_code' => $coursecategory_code,':coursecategory_created' =>date('Y-m-d H:i:s')));
		}
		catch(PDOException $e)
		{
			echo "Error: " . __LINE__. $e->getMessage();
		}		
	}
	return $coursecategory_ref;
}

function getCourseDetailsMoodle($course_code)
{
	global $PDO, $PDO_WRITE;

  $course_ref = "";

	if(trim($course_code)!="")
	{
		$query = 	"SELECT
						course_ref 
				 	FROM 
						course
				 	WHERE 
					 	MD5(course_code) = :course_code
             AND
            course_status_id = '1'";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':course_code' => md5($course_code)));
		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$course_ref = $row['course_ref'];
		}
		else
		{
			$course_ref = "";
		}
	}
	return $course_ref;
}


function addCourseForRef($course_code, $coursecategory_ref, $course_array)
{
	global $PDO, $PDO_WRITE;

	$course_code = $course_code;
	$course_name = $course_array['course_name'];

  $course_ref = "";

	if(trim($course_code)!="")
	{
		$course_ref = random_reference();
		try
		{
			$query = 	"INSERT INTO
						course
						SET
						course_created 		= :course_created,
						course_status_id 	= '1',
						course_ref 		  	= :course_ref,
						course_name 			= :course_name,
						course_coursecategory_ref 			= :course_coursecategory_ref,
						course_code 			= :course_code";
			
			$sth = $PDO_WRITE->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

			$sth->execute(array(':course_ref' => $course_ref,':course_name' => $course_name,':course_coursecategory_ref' => $coursecategory_ref,':course_code' => $course_code,':course_created' =>date('Y-m-d H:i:s')));
		}
		catch(PDOException $e)
		{
			echo "Error: " . __LINE__. $e->getMessage();
		}		
	}
	return $course_ref;
}

function getCourseDetailsAPI($moodle_ref)
{
  $course_details = array();

	$COURSE_ID = $moodle_ref;
	$API_KEY = 'Ke42zHuNjxzo9DiJiJhhFLemrsLBXvdeYdhkiDtB4vxxuEQzqNMyKy9MR6';

	$curl = curl_init();

	curl_setopt_array($curl, array(
	  CURLOPT_URL => 'https://www.sip-and-learn.com/wp-json/rubay-platform/v1/course/'.$COURSE_ID.'?api_key='.$API_KEY,
	  CURLOPT_RETURNTRANSFER => true,
	  CURLOPT_ENCODING => '',
	  CURLOPT_MAXREDIRS => 10,
	  CURLOPT_TIMEOUT => 0,
	  CURLOPT_FOLLOWLOCATION => true,
	  CURLOPT_SSL_VERIFYPEER => false,
	  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
	  CURLOPT_CUSTOMREQUEST => 'GET',
	));

	$response = curl_exec($curl);
	curl_close($curl);

	$result = json_decode($response);

	if($result->course_name)
	{
	  $course_details['course_name'] = $result->course_name;
	  $course_details['category_id'] = $result->category_id;
	  $course_details['category_name'] = $result->category_name;
	}
	else
	{
	  $course_details['course_name'] = "";
	  $course_details['category_id'] = "";
	  $course_details['category_name'] = "";
	}

	return $course_details;
}


function addCourseToCustomer($customer_ref, $course_ref)
{
	global $PDO, $PDO_WRITE;

  $custcourse_ref = "";

	if(trim($customer_ref)!="")
	{
		$custcourse_ref = random_reference();
		try
		{
			$query = 	"INSERT INTO
						custcourse
						SET
						custcourse_created 					= :custcourse_created,
						custcourse_added 						= :custcourse_added,
						custcourse_status_id 				= '1',
						custcourse_ref 		  				= :custcourse_ref,
						custcourse_customer_ref 		= :custcourse_customer_ref,
						custcourse_course_ref 			= :custcourse_course_ref";
			
			$sth = $PDO_WRITE->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

			$sth->execute(array(
				':custcourse_ref' => $custcourse_ref,
				':custcourse_customer_ref' => $customer_ref,
				':custcourse_course_ref' => $course_ref,
				':custcourse_created' =>date('Y-m-d H:i:s'),
				':custcourse_added' =>date('Y-m-d H:i:s')));
		}
		catch(PDOException $e)
		{
			echo "Error: " . __LINE__. $e->getMessage();
		}		
	}
	return $custcourse_ref;
}


function deleteCourseToCustomer($customer_ref, $course_ref)
{
	global $PDO, $PDO_WRITE;

  $custcourse_ref = "";

	if(trim($customer_ref)!="")
	{
		try
		{
			$query = 	"UPDATE
						custcourse
						SET
						custcourse_status_id 				= '99'
						WHERE
						custcourse_customer_ref 		= :custcourse_customer_ref
						AND
						custcourse_course_ref 			= :custcourse_course_ref";
			
			$sth = $PDO_WRITE->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

			$sth->execute(array(
				':custcourse_customer_ref' => $customer_ref,
				':custcourse_course_ref' => $course_ref
			));
		}
		catch(PDOException $e)
		{
			echo "Error: " . __LINE__. $e->getMessage();
		}		
	}
	return $custcourse_ref;
}


function completeCourseToCustomer($customer_ref, $course_ref)
{
	global $PDO, $PDO_WRITE;

  $custcourse_ref = "";

	if(trim($customer_ref)!="")
	{
		try
		{
			$query = 	"UPDATE
						custcourse
						SET
						custcourse_status_id 				= '7'
						WHERE
						custcourse_customer_ref 		= :custcourse_customer_ref
						AND
						custcourse_course_ref 			= :custcourse_course_ref";
			
			$sth = $PDO_WRITE->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));

			$sth->execute(array(
				':custcourse_customer_ref' => $customer_ref,
				':custcourse_course_ref' => $course_ref
			));
		}
		catch(PDOException $e)
		{
			echo "Error: " . __LINE__. $e->getMessage();
		}		
	}
	return $custcourse_ref;
}


function getCourseDetailsForACustomerRefAPI($customers_ref)
{
	global $PDO, $PDO_WRITE;

  $response = array();

	if(trim($customers_ref)!="")
	{
		$query = 	"SELECT
						course_name,
						course_code,
						coursecategory_name,
						coursecategory_code,
						(
							CASE 
								WHEN (custcourse_status_id = 1) THEN 'Enrolled'
								WHEN (custcourse_status_id = 2) THEN 'Started'
								WHEN (custcourse_status_id = 3) THEN 'Archive'
								WHEN (custcourse_status_id = 7) THEN 'Completed'
								WHEN (custcourse_status_id = 99) THEN 'Deleted'
							END
						) AS course_status
				 	FROM 
						custcourse
						LEFT JOIN course ON (course_ref = custcourse_course_ref)
						LEFT JOIN coursecategory ON (coursecategory_ref = course_coursecategory_ref)
				 	WHERE 
					 	MD5(custcourse_customer_ref) = :custcourse_customer_ref
             AND
            course_status_id = '1'
             AND
            custcourse_status_id NOT IN (99)
          ORDER BY coursecategory_name ASC, course_name ASC";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$sth->execute(array(':custcourse_customer_ref' => md5($customers_ref)));
		while($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			$response[$row['coursecategory_code']][] = $row;
		}
	}
	return $response;
}

function getDashboardDetailsCustomerRelated($fieldName, $groupByName, $startDateTime = false, $endDateTime = false, $connectingTable = false, $connectingField = false)
{
	global $PDO, $PDO_WRITE;

	$RETURN = array();
	$ADD_WHERE = "";
	$ADD_LEFT_JOIN = "";

	try 
	{

		if($startDateTime != false)
		{
			$ADD_WHERE .= " AND customers_created >= '".$startDateTime."'";
		}
		if($endDateTime != false)
		{
			$ADD_WHERE .= " AND customers_created <= '".$endDateTime."'";
		}

		if($connectingTable != false)
		{
			$ADD_LEFT_JOIN .= " LEFT JOIN ".$connectingTable." ON ".$connectingField." = ".$connectingTable."_ref ";
		}

		$query = 	"SELECT 
						count(1) as 'total',
						IFNULL(".$fieldName.", 'NULL') as 'label'
				 	FROM 
						customers
						".$ADD_LEFT_JOIN."
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		AND TRIM(".$fieldName.") != ''
				 		".$ADD_WHERE."
					GROUP BY 
						".$groupByName."
					ORDER BY 
						".$fieldName." ASC";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$RETURN = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		//echo "Error: " . __LINE__. $e->getMessage();
		$RETURN = "Error: " . __LINE__. $e->getMessage();
	}
	return $RETURN;
}

function calculateTotalOfDashData($FETCHED_DATA)
{
	$TOTAL_ARRAY = array();
	$TOTAL_CALC = 0;
	for($i=0; $i<count($FETCHED_DATA); $i++)
	{
		$TOTAL_CALC = $TOTAL_CALC + $FETCHED_DATA[$i]['total'];
	}
	$TOTAL_ARRAY['total'] = $TOTAL_CALC;
	$TOTAL_ARRAY['label'] = 'Total';

	array_unshift($FETCHED_DATA, $TOTAL_ARRAY);

	if($TOTAL_CALC == 0)
	{
		$TOTAL_CALC = 1;
	}
	for($i=0; $i<count($FETCHED_DATA); $i++)
	{
		$percentage = ($FETCHED_DATA[$i]['total']/$TOTAL_CALC) * 100;
		$percentage = number_format((float)$percentage, 2, '.', '');
		$FETCHED_DATA[$i]['percentage'] = $percentage;
	}


	return $FETCHED_DATA;
}

function getDashboardDetailsCustomerRelatedDates($fieldName, $groupByName, $startDateTime = false, $endDateTime = false, $connectingTable = false, $connectingField = false, $groupByNeeded = false)
{
	global $PDO, $PDO_WRITE;

	$RETURN = array();
	$ADD_WHERE = "";
	$ADD_LEFT_JOIN = "";
	$GROUP_BY_CONDITION = "";

	try 
	{

		if($startDateTime != false)
		{
			$ADD_WHERE .= " AND customers_created >= '".$startDateTime."'";
		}
		if($endDateTime != false)
		{
			$ADD_WHERE .= " AND customers_created <= '".$endDateTime."'";
		}

		if($groupByNeeded !=false)
		{
			$GROUP_BY_CONDITION = "GROUP BY YEAR(customers_created), MONTH(customers_created)";
		}

		$query = 	"SELECT 
								count(".$fieldName.") as 'total'
								, YEAR('".$endDateTime."') as 'year'
								, MONTHNAME('".$endDateTime."') as 'month'
							FROM 
								customers 
							WHERE 
								customers_status_id = :customers_status_id
						 		".$ADD_WHERE."
							".$GROUP_BY_CONDITION."
							ORDER BY 
								YEAR(customers_created) ASC, MONTH(customers_created) ASC
							LIMIT 0,1";

		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = array();
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		$sth->execute($pdo_fieldvalue);

		if($row = $sth->fetch(PDO::FETCH_ASSOC))
		{
			//while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array[] = $row;
			}
			$RETURN = $temp_array;

		}
		else
		{
			$row['total'] = 0;
			$row['year'] = date('Y', strtotime($endDateTime));
			$row['month'] = date('F', strtotime($endDateTime));
			$temp_array[] = $row;
			$RETURN = $temp_array;
		}
	}
	catch(PDOException $e)
	{
		//echo "Error: " . __LINE__. $e->getMessage();
		$RETURN = "Error: " . __LINE__. $e->getMessage();
	}
	return $RETURN;
}

function getDashboardDetailsCustomerRelatedAge($fieldName, $groupByName, $startDateTime = false, $endDateTime = false, $connectingTable = false, $connectingField = false)
{
	global $PDO, $PDO_WRITE;

	$RETURN = array();
	$ADD_WHERE = "";
	$ADD_LEFT_JOIN = "";

	try 
	{

		if($startDateTime != false)
		{
			$ADD_WHERE .= " AND customers_dob > '".$startDateTime."'";
		}
		if($endDateTime != false)
		{
			$ADD_WHERE .= " AND customers_dob <= '".$endDateTime."'";
		}

		if($connectingTable != false)
		{
			$ADD_LEFT_JOIN .= " LEFT JOIN ".$connectingTable." ON ".$connectingField." = ".$connectingTable."_ref ";
		}

		$query = 	"SELECT 
						count(1) as 'total',
						'".$fieldName."' as 'label'
				 	FROM 
						customers
						".$ADD_LEFT_JOIN."
				 	WHERE 
				 		customers_status_id = :customers_status_id
				 		".$ADD_WHERE."";
		$sth = $PDO->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		$temp_array = '';
		$pdo_fieldvalue = array(':customers_status_id' => '1');

		if($sth->execute($pdo_fieldvalue))
		{
			while($row = $sth->fetch(PDO::FETCH_ASSOC))
			{
				foreach ($row as $key => $value) 
				{
					$row[$key] =  stripslashes($value);
				}
				foreach ($row as $key => $value) 
				{
					$row[$key] = strip_tags($value, '<p><font><span><div><ul><li><br><table><thead><tbody><th><tr><td>');
				}
				$temp_array = $row;
			}
			$RETURN = $temp_array;

		}
	}
	catch(PDOException $e)
	{
		//echo "Error: " . __LINE__. $e->getMessage();
		$RETURN = "Error: " . __LINE__. $e->getMessage();
	}
	return $RETURN;
}

?>